const jpegjs = require('jpeg-js');
const PNG = require('pngjs').PNG;
const fs = require('fs');

const DATA_URL_HEADER_OFFSET = 21;
const LED_WALL_WIDTH = 16;
const LED_WALL_HEIGHT = 10;
const LED_WALL_FRAME_LEN = (LED_WALL_WIDTH * LED_WALL_HEIGHT) * 3;

const font_4x5_col = {
    ' ': [0x0, 0x0, 0x0, 0x0, 0x0], // 32
    '!': [0x4, 0x4, 0x4, 0x0, 0x4],
    '"': [0xa, 0xa, 0x0, 0x0, 0x0],
    '#': [0x6, 0xf, 0x6, 0xf, 0x6],
    '$': [0x7, 0xa, 0x6, 0x5, 0xe],
    '%': [0x7, 0xe, 0x4, 0x7, 0xe],
    '&': [0x2, 0x5, 0x6, 0xa, 0x5],
    '\'': [0x2, 0x2, 0x0, 0x0, 0x0],
    '(': [0x4, 0x8, 0x8, 0x8, 0x4],
    ')': [0x4, 0x2, 0x2, 0x2, 0x4],
    '*': [0x0, 0x6, 0xf, 0x6, 0x0],
    '+': [0x0, 0x2, 0x7, 0x2, 0x0],
    ',': [0x0, 0x0, 0x0, 0x2, 0x4],
    '-': [0x0, 0x0, 0x0, 0xf, 0x0],
    '.': [0x0, 0x0, 0x0, 0x0, 0x4],
    '/': [0x1, 0x1, 0x2, 0x4, 0x8],
    '0': [0x6, 0xb, 0xf, 0xd, 0x6],
    '1': [0x2, 0x6, 0x2, 0x2, 0x2],
    '2': [0xe, 0x1, 0x6, 0x8, 0xf],
    '3': [0xe, 0x1, 0x6, 0x1, 0xe],
    '4': [0x2, 0x6, 0xa, 0xf, 0x2],
    '5': [0xf, 0x8, 0xe, 0x1, 0xe],
    '6': [0x6, 0x8, 0xe, 0x9, 0x6],
    '7': [0xf, 0x1, 0x2, 0x4, 0x8],
    '8': [0x6, 0x9, 0x6, 0x9, 0x6],
    '9': [0x6, 0x9, 0xf, 0x1, 0x6],
    ':': [0x0, 0x4, 0x0, 0x4, 0x0],
    ';': [0x0, 0x4, 0x0, 0x4, 0x8],
    '<': [0x2, 0x4, 0x8, 0x4, 0x2],
    '=': [0x0, 0xf, 0x0, 0xf, 0x0],
    '>': [0x4, 0x2, 0x1, 0x2, 0x4],
    '?': [0x6, 0x9, 0x2, 0x0, 0x2],
    '@': [0x6, 0xd, 0xb, 0x8, 0x6],
    'A': [0x4, 0xa, 0xe, 0xa, 0xa],
    'B': [0xe, 0x9, 0xe, 0x9, 0xe],
    'C': [0x6, 0x9, 0x8, 0x9, 0x6],
    'D': [0xe, 0x9, 0x9, 0x9, 0xe],
    'E': [0xf, 0x8, 0xe, 0x8, 0xf],
    'F': [0xf, 0x8, 0xe, 0x8, 0x8],
    'G': [0x6, 0x8, 0xb, 0x9, 0x6],
    'H': [0x9, 0x9, 0xf, 0x9, 0x9],
    'I': [0xe, 0x4, 0x4, 0x4, 0xe],
    'J': [0x1, 0x1, 0x1, 0x9, 0x6],
    'K': [0x9, 0xa, 0xc, 0xa, 0x9],
    'L': [0x8, 0x8, 0x8, 0x8, 0xf],
    'M': [0x9, 0xf, 0xf, 0x9, 0x9],
    'N': [0x9, 0xd, 0xf, 0xb, 0x9],
    'O': [0x6, 0x9, 0x9, 0x9, 0x6],
    'P': [0xe, 0x9, 0xe, 0x8, 0x8],
    'Q': [0x6, 0x9, 0x9, 0xb, 0x7],
    'R': [0xe, 0x9, 0xe, 0xa, 0x9],
    'S': [0x7, 0x8, 0x6, 0x1, 0xe],
    'T': [0xe, 0x4, 0x4, 0x4, 0x4],
    'U': [0x9, 0x9, 0x9, 0x9, 0x6],
    'V': [0x9, 0x9, 0x9, 0x6, 0x6],
    'W': [0x9, 0x9, 0xf, 0xf, 0x9],
    'X': [0x9, 0x9, 0x6, 0x9, 0x9],
    'Y': [0x9, 0x5, 0x2, 0x2, 0x2],
    'Z': [0xf, 0x2, 0x4, 0x8, 0xf],
    '[': [0xe, 0x8, 0x8, 0x8, 0xe],
    '\\': [0x8, 0x8, 0x4, 0x2, 0x1],
    ']': [0x7, 0x1, 0x1, 0x1, 0x7],
    '^': [0x4, 0xa, 0x0, 0x0, 0x0],
    '_': [0x0, 0x0, 0x0, 0x0, 0xf],
    '`': [0x4, 0x2, 0x0, 0x0, 0x0],
    'a': [0x0, 0x5, 0xb, 0xb, 0x5],
    'b': [0x8, 0x8, 0xe, 0x9, 0xe],
    'c': [0x0, 0x7, 0x8, 0x8, 0x7],
    'd': [0x1, 0x1, 0x7, 0x9, 0x7],
    'e': [0x0, 0x6, 0xf, 0x8, 0x7],
    'f': [0x3, 0x4, 0xe, 0x4, 0x4],
    'g': [0x7, 0x9, 0x7, 0x1, 0x7],
    'h': [0x8, 0x8, 0xe, 0x9, 0x9],
    'i': [0x0, 0x2, 0x0, 0x2, 0x2],
    'j': [0x1, 0x0, 0x1, 0x1, 0x6],
    'k': [0x8, 0xa, 0xc, 0xa, 0x9],
    'l': [0xc, 0x4, 0x4, 0x4, 0xe],
    'm': [0x0, 0x9, 0xf, 0xf, 0x9],
    'n': [0x0, 0xe, 0x9, 0x9, 0x9],
    'o': [0x0, 0x6, 0x9, 0x9, 0x6],
    'p': [0x0, 0xe, 0x9, 0xe, 0x8],
    'q': [0x0, 0x6, 0x9, 0x7, 0x1],
    'r': [0x0, 0xb, 0xc, 0x8, 0x8],
    's': [0x0, 0x7, 0x4, 0x2, 0xe],
    't': [0x4, 0xe, 0x4, 0x4, 0x3],
    'u': [0x0, 0x9, 0x9, 0x9, 0x6],
    'v': [0x0, 0x9, 0x9, 0x6, 0x6],
    'w': [0x0, 0x9, 0xf, 0xf, 0x6],
    'x': [0x0, 0x9, 0x6, 0x6, 0x9],
    'y': [0x0, 0x9, 0x7, 0x1, 0x6],
    'z': [0x0, 0xf, 0x2, 0x4, 0xf],
    '{': [0x6, 0x4, 0xc, 0x4, 0x6],
    '|': [0x4, 0x4, 0x4, 0x4, 0x4],
    '}': [0xc, 0x4, 0x6, 0x4, 0xc],
    '~': [0x0, 0x0, 0x5, 0xa, 0x0],
};

const font_5x7_col = [
		[ 0x00, 0x00, 0x00, 0x00, 0x00 ], //
		[ 0x00, 0x00, 0x00, 0x00, 0x00 ], //
		[ 0x00, 0x00, 0x00, 0x00, 0x00 ], //
		[ 0x00, 0x00, 0x00, 0x00, 0x00 ], //
		[ 0x00, 0x00, 0x00, 0x00, 0x00 ], //
		[ 0x00, 0x00, 0x00, 0x00, 0x00 ], //
		[ 0x00, 0x00, 0x00, 0x00, 0x00 ], //
		[ 0x00, 0x00, 0x00, 0x00, 0x00 ], //
		[ 0x00, 0x00, 0x00, 0x00, 0x00 ], //
		[ 0x03, 0x07, 0x7E, 0x20, 0x1C ], //
		[ 0x60, 0x66, 0x09, 0x09, 0x09 ], //
		[ 0x60, 0x6F, 0x0A, 0x0A, 0x08 ], //
		[ 0x10, 0x18, 0x1C, 0x18, 0x10 ], //
		[ 0x00, 0x3E, 0x1C, 0x08, 0x00 ], //
		[ 0x00, 0x08, 0x1C, 0x3E, 0x00 ], //
		[ 0x04, 0x0C, 0x1C, 0x0C, 0x04 ], //
		[ 0x7F, 0x00, 0x00, 0x00, 0x00 ], // (1 col left)
		[ 0x7F, 0x7F, 0x00, 0x00, 0x00 ], // (2 col left)
		[ 0x7F, 0x7F, 0x7F, 0x00, 0x00 ], // (3 col left)
		[ 0x7F, 0x7F, 0x7F, 0x7F, 0x00 ], // (4 col left)
		[ 0x7F, 0x7F, 0x7F, 0x7F, 0x7F ], // (solid fill)
		[ 0x00, 0x7F, 0x7F, 0x7F, 0x7F ], // (4 col right)
		[ 0x00, 0x00, 0x7F, 0x7F, 0x7F ], // (3 col right)
		[ 0x00, 0x00, 0x00, 0x7F, 0x7F ], // (2 col right)
		[ 0x00, 0x00, 0x00, 0x00, 0x7F ], // (1 col right)
		[ 0x03, 0x07, 0x7E, 0x20, 0x1C ], // (music note)
		[ 0x60, 0x66, 0x09, 0x09, 0x09 ], // (deg c)
		[ 0x60, 0x6F, 0x0A, 0x0A, 0x08 ], // (deg f)
		[ 0x10, 0x18, 0x1C, 0x18, 0x10 ], // (triangle down)
		[ 0x00, 0x3E, 0x1C, 0x08, 0x00 ], // (triangle right)
		[ 0x00, 0x08, 0x1C, 0x3E, 0x00 ], // (triangle left)
		[ 0x04, 0x0C, 0x1C, 0x0C, 0x04 ], // (triangle up)
		[ 0x00, 0x00, 0x00, 0x00, 0x00 ], // (space)
		[ 0x00, 0x7D, 0x00, 0x00, 0x00 ], // (!)
		[ 0x00, 0x70, 0x00, 0x70, 0x00 ], // (")
		[ 0x14, 0x7F, 0x14, 0x7F, 0x14 ], // (#)
		[ 0x12, 0x2A, 0x7F, 0x2A, 0x24 ], // ($)
		[ 0x62, 0x64, 0x08, 0x13, 0x23 ], // (%)
		[ 0x36, 0x49, 0x35, 0x02, 0x05 ], // (&)
		[ 0x00, 0x50, 0x60, 0x00, 0x00 ], // (')
		[ 0x00, 0x1C, 0x22, 0x41, 0x00 ], // (()
		[ 0x00, 0x41, 0x22, 0x1C, 0x00 ], // ())
		[ 0x44, 0x28, 0x7C, 0x28, 0x44 ], // (*)
		[ 0x08, 0x08, 0x7F, 0x08, 0x08 ], // (+)
		[ 0x05, 0x06, 0x00, 0x00, 0x00 ], // (,)
		[ 0x08, 0x08, 0x08, 0x00, 0x00 ], // (-)
		[ 0x00, 0x03, 0x03, 0x00, 0x00 ], // (.)
		[ 0x02, 0x04, 0x08, 0x10, 0x20 ], // (/)
		[ 0x3E, 0x45, 0x49, 0x51, 0x3E ], // (0)
		[ 0x00, 0x21, 0x7F, 0x01, 0x00 ], // (1)
		[ 0x21, 0x43, 0x45, 0x49, 0x31 ], // (2)
		[ 0x42, 0x41, 0x51, 0x69, 0x46 ], // (3)
		[ 0x0C, 0x14, 0x24, 0x7F, 0x04 ], // (4)
		[ 0x72, 0x51, 0x51, 0x51, 0x4E ], // (5)
		[ 0x1E, 0x29, 0x49, 0x49, 0x06 ], // (6)
		[ 0x43, 0x44, 0x48, 0x50, 0x60 ], // (7)
		[ 0x36, 0x49, 0x49, 0x49, 0x36 ], // (8)
		[ 0x30, 0x49, 0x49, 0x4A, 0x3C ], // (9)
		[ 0x00, 0x36, 0x36, 0x00, 0x00 ], // (:)
		[ 0x00, 0x35, 0x36, 0x00, 0x00 ], // (;)
		[ 0x08, 0x14, 0x22, 0x41, 0x00 ], // (<)
		[ 0x14, 0x14, 0x14, 0x14, 0x14 ], // (=)
		[ 0x41, 0x22, 0x14, 0x08, 0x00 ], // (>)
		[ 0x20, 0x40, 0x45, 0x48, 0x30 ], // (?)
		[ 0x3E, 0x41, 0x4D, 0x51, 0x36 ], // (@)
		[ 0x3F, 0x48, 0x48, 0x48, 0x3F ], // (A)
		[ 0x7F, 0x49, 0x49, 0x49, 0x36 ], // (B)
		[ 0x3E, 0x41, 0x41, 0x41, 0x22 ], // (C)
		[ 0x7F, 0x41, 0x41, 0x41, 0x3E ], // (D)
		[ 0x7F, 0x49, 0x49, 0x49, 0x41 ], // (E)
		[ 0x7F, 0x48, 0x48, 0x48, 0x40 ], // (F)
		[ 0x3E, 0x41, 0x49, 0x49, 0x2E ], // (G)
		[ 0x7F, 0x08, 0x08, 0x08, 0x7F ], // (H)
		[ 0x00, 0x41, 0x7F, 0x41, 0x00 ], // (I)
		[ 0x02, 0x01, 0x41, 0x7E, 0x40 ], // (J)
		[ 0x7F, 0x08, 0x14, 0x22, 0x41 ], // (K)
		[ 0x7F, 0x01, 0x01, 0x01, 0x01 ], // (L)
		[ 0x7F, 0x20, 0x18, 0x20, 0x7F ], // (M)
		[ 0x7F, 0x10, 0x08, 0x04, 0x7F ], // (N)
		[ 0x3E, 0x41, 0x41, 0x41, 0x3E ], // (O)
		[ 0x7F, 0x48, 0x48, 0x48, 0x30 ], // (P)
		[ 0x3E, 0x41, 0x45, 0x42, 0x3D ], // (Q)
		[ 0x7F, 0x48, 0x4C, 0x4A, 0x31 ], // (R)
		[ 0x31, 0x49, 0x49, 0x49, 0x46 ], // (S)
		[ 0x40, 0x40, 0x7F, 0x40, 0x40 ], // (T)
		[ 0x7E, 0x01, 0x01, 0x01, 0x7E ], // (U)
		[ 0x7C, 0x02, 0x01, 0x02, 0x7C ], // (V)
		[ 0x7E, 0x01, 0x06, 0x01, 0x7E ], // (W)
		[ 0x63, 0x14, 0x08, 0x14, 0x63 ], // (X)
		[ 0x70, 0x08, 0x07, 0x08, 0x70 ], // 󰀀
		[ 0x43, 0x45, 0x49, 0x51, 0x61 ], // (Z)
		[ 0x00, 0x7F, 0x41, 0x41, 0x00 ], // ([)
		[ 0x20, 0x10, 0x08, 0x04, 0x02 ], // (\)
		[ 0x00, 0x41, 0x41, 0x7F, 0x00 ], // (])
		[ 0x10, 0x20, 0x40, 0x20, 0x10 ], // (^)
		[ 0x01, 0x01, 0x01, 0x01, 0x01 ], // (_)
		[ 0x00, 0x40, 0x20, 0x10, 0x00 ], // (`)
		[ 0x02, 0x15, 0x15, 0x15, 0x0F ], // (a)
		[ 0x7F, 0x09, 0x11, 0x11, 0x0E ], // (b)
		[ 0x0E, 0x11, 0x11, 0x11, 0x02 ], // (c)
		[ 0x0E, 0x11, 0x11, 0x09, 0x7F ], // (d)
		[ 0x0E, 0x15, 0x15, 0x15, 0x0C ], // (e)
		[ 0x08, 0x3F, 0x48, 0x40, 0x20 ], // (f)
		[ 0x18, 0x25, 0x25, 0x25, 0x3E ], // (g)
		[ 0x7F, 0x08, 0x10, 0x10, 0x0F ], // (h)
		[ 0x00, 0x11, 0x5F, 0x01, 0x00 ], // (i)
		[ 0x02, 0x01, 0x11, 0x5E, 0x00 ], // (j)
		[ 0x7F, 0x04, 0x0A, 0x11, 0x00 ], // (k)
		[ 0x00, 0x41, 0x7F, 0x01, 0x00 ], // (l)
		[ 0x1F, 0x10, 0x0C, 0x10, 0x0F ], // (m)
		[ 0x1F, 0x08, 0x10, 0x10, 0x0F ], // (n)
		[ 0x0E, 0x11, 0x11, 0x11, 0x0E ], // (o)
		[ 0x1F, 0x14, 0x14, 0x14, 0x08 ], // (p)
		[ 0x08, 0x14, 0x14, 0x14, 0x0F ], // (q)
		[ 0x1F, 0x08, 0x10, 0x10, 0x08 ], // (r)
		[ 0x09, 0x15, 0x15, 0x15, 0x02 ], // (s)
		[ 0x10, 0x7E, 0x11, 0x01, 0x02 ], // (t)
		[ 0x1E, 0x01, 0x01, 0x02, 0x1F ], // (u)
		[ 0x1C, 0x02, 0x01, 0x02, 0x1C ], // (v)
		[ 0x1E, 0x01, 0x02, 0x01, 0x1E ], // (w)
		[ 0x11, 0x0A, 0x04, 0x0A, 0x11 ], // (x)
		[ 0x18, 0x05, 0x05, 0x05, 0x1E ], // 󰀀
		[ 0x11, 0x13, 0x15, 0x19, 0x11 ], // (z)
		[ 0x08, 0x36, 0x41, 0x00, 0x00 ], // ([)
		[ 0x00, 0x00, 0x7F, 0x00, 0x00 ], // (|)
		[ 0x00, 0x00, 0x41, 0x36, 0x08 ], // (])
		[ 0x08, 0x08, 0x2A, 0x1C, 0x08 ], // (arrow right)
		[ 0x08, 0x1C, 0x2A, 0x08, 0x08 ], // (arrow left)
];

var pixels = new Array(LED_WALL_WIDTH);

function drawCharAt4x5(xref, yref, c, color)
{    
    var letter = font_4x5_col[c];
    
	/** Optimisation Level 1 don't display out of screen characters **/
	var font_width = 4;
	var font_height = 5;

	var row_start = 0;
    var row_end = font_height;
	var col_start = 0;
    var col_end = font_width;

	if(xref <= (-font_width)) //Out of screen to the left
	{
		return;
	}

	if(yref <= (-font_height)) //Out of screen to the Top
	{
		return;
	}

	if(yref >= LED_WALL_HEIGHT) //Out of screen to the bottom
	{
		return;
	}

	if(xref >= LED_WALL_WIDTH) //Out of screen to the right
	{
		return;
	}

	/** End opt level 1 **/

	/** Begin level Opt 2 Only process begin of screen visible pixels **/

	row_start = yref < 0 ? -yref : 0; //Offset set start of row by xref if is is negative, only takes the visible pixels
	col_start = xref < 0 ? -xref : 0;

	/** End level opt 2 **/

	/** level Opt 3 Only process the visible end of screen pixels**/

	row_end = yref + font_height > LED_WALL_HEIGHT ? LED_WALL_HEIGHT - yref : font_height; //Some pixels will go out of window on the bottom
	col_end = xref + font_width > LED_WALL_WIDTH ? LED_WALL_WIDTH - xref : font_width;
	//Some pixels will go out of window on the right
	//so the last column index + 1 is W-xref

	/** End level opt 3 */

	//Navigate through the letter pixels
	for (var row = row_start; row < row_end; row++)
	{
		for (var col = col_start; col < col_end; col++)
		{
			var xn = xref + col;
			var yn = yref + row;

			//if the pixel is visible, draw it
			if (letter[row] & (0x08 >> col)) //pixel ON
			{
				//pixel_string[pix_map[xn][yn]] = color;
                pixels[xn][yn] = 255;
			}
			else //pixel OFF
			{
                pixels[xn][yn] = 0;
			}
		}
    }
}

function drawStringAt4x5(xref, yref, s, textColor, bgColor)
{
    var frame_RGB = [];

    for(var i = 0; i < s.length; i++)
    {
        drawCharAt4x5(xref, yref, s[i], textColor);
        xref += 5;
    }

    for (var x = 0; x < LED_WALL_HEIGHT; x++)
    {
        for (var y = 0; y < LED_WALL_WIDTH; y++)
        {
            if (pixels[y][x] == 255)
            {
                frame_RGB.push(textColor[0]);
                frame_RGB.push(textColor[1]);
                frame_RGB.push(textColor[2]);
            }
            else
            {
                frame_RGB.push(bgColor[0]);
                frame_RGB.push(bgColor[1]);
                frame_RGB.push(bgColor[2]);
            }
        }
    }
    //console.log(frame_RGB);
    module.exports.WS2812DisplayImage(frame_RGB);
}

function clearPixels()
{
    for(var x = 0; x < LED_WALL_WIDTH; x++)
    {
        for(var y = 0; y< LED_WALL_HEIGHT; y++)
        {
            pixels[x][y] = 0;
        }
    }
}

/*  This functions trims the data URL informations before the actual data we need 
    returns: trimmed base64 data of the image file
*/

function Base64ExtractPNG(data_url)
{
    return data_url.substring(DATA_URL_HEADER_OFFSET);
}

module.exports = {
    WS2812JPEGToRgb: function(img_path)
    {
        var jpeg_data = fs.readFileSync(img_path);      //File read
        var raw_image_data = jpegjs.decode(jpeg_data);    
        return raw_image_data.data;                     //We only need the data buffer
    },
    WS2812JSONToRgb: function(json_obj)
    {
        var img_data = JSON.parse(json_obj);
        // for (var i = 0; i < img_data.width * img_data.length; i++)
        // {
        //     var x = (i / 4) % img_data.width;
        //     var y = Math.floor((i / 4) / img_data.width);
        //     indexed_image_data[i] = img_data[x][y];
        // }
        return img_data.color_data;                     //We only need the data buffer
    },
    WS2812DisplayImage: function(img_data)
    {
        var bin_data = new Buffer.from(img_data, 'binary');
        fs.writeFile("/tmp/lwfb", bin_data, function(err) {
            if (err) {
                return console.log(err);
            }
        });
    },
    WS2812RunWordArt: function(text, textColor, bgColor, old_interval_id)
    {
        var xref = 0;
        var yref = 0;
        var i = 0;

        for(var x = 0; x < LED_WALL_WIDTH; x++)
        {
           pixels[x] = new Array(LED_WALL_HEIGHT);
        }
        
        if (old_interval_id != -1)
        {
            console.log("Killed old word art");
            clearInterval(old_interval_id);
        }

        var interval_id = setInterval(function() 
        { 
            clearPixels();

            drawStringAt4x5(xref + 3, 0, text, textColor, bgColor);

            //drawStringAt4x5(xref + 3, 5, text2, color2);
            if(xref < - text.length * 6)
            {
                xref = LED_WALL_WIDTH;
            }
            else
            {
                xref--; 
            }
        }, 100);

        return interval_id; 
    },
    WS2812RunEditorImage: function(json_obj, old_interval_id)
    {
        var frame_counter = 0;
        var frame_base64PNG = JSON.parse(json_obj.piskel.layers[0]).base64PNG;
        var frame_number = JSON.parse(json_obj.piskel.layers[0]).frameCount;
        var frame_delay = (1 / json_obj.piskel.fps) * 1000;                      //In milliseconds

        var frame_PNGbuffer = Buffer.from(Base64ExtractPNG(frame_base64PNG), 'base64');

        if (old_interval_id != -1)
        {
            console.log("Killed old animation");
            clearInterval(old_interval_id);
        }
        console.log('ici');

        var frame_RGB = [];
        var png_file = new PNG({ filterType:4 }).parse(frame_PNGbuffer, function(error, data)
        {
            if (data.width > LED_WALL_WIDTH)    //That's an animation
            {
                // console.log("animation");
                // console.log(frame_counter);
                // console.log(LED_WALL_WIDTH * frame_counter);
                // console.log(LED_WALL_WIDTH * (frame_counter + 1));
                for (frame_counter = 0; frame_counter < frame_number; frame_counter += 1)
                {
                    for (var y = 0; y < data.height; y++) 
                    {
                        /* We scroll through the animation images. Indeed, animations are stored in a single PNG.        */
                        /* Thus, a 4 frame animation will be stored as a 64*10 image, while a two frame one in a 32 * 10 */
                        /* Rather straightforward.                                                                       */
                        for (var x = LED_WALL_WIDTH * frame_counter; x < LED_WALL_WIDTH * (frame_counter + 1); x++)
                        {
                            var idx = (data.width * y + x) << 2;  //2D coordinates to 1D array index, very important formula!
                            frame_RGB.push(data.data[idx]);       //R
                            frame_RGB.push(data.data[idx + 1]);   //G
                            frame_RGB.push(data.data[idx + 2]);   //B
                        }
                    }   
                }
            }
            else 
            {
                for (var y = 0; y < data.height; y++) 
                {
                    for (var x = 0; x < data.width; x++) 
                    {
                        var idx = (data.width * y + x) << 2;  //2D coordinates to 1D array index, very important formula!
                        frame_RGB.push(data.data[idx]);       //R
                        frame_RGB.push(data.data[idx + 1]);   //G
                        frame_RGB.push(data.data[idx + 2]);   //B
                    }
                }   
            }
            //console.log(frame_RGB);
        });

        frame_counter = 0;
        
        var interval_id = setInterval(function() 
        { 
            if (frame_counter < frame_number)
            {
                array_idx = frame_counter * LED_WALL_FRAME_LEN;
                module.exports.WS2812DisplayImage(frame_RGB.slice(array_idx, array_idx + LED_WALL_FRAME_LEN));
                frame_counter += 1;
            }
            else {
                frame_counter = 0;
            }    
        }, frame_delay);

        return interval_id; 
    }
};
