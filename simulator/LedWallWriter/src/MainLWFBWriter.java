import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.Random;

public class MainLWFBWriter {

	// put the directory name from the root of systemdrive
	public static final String LWFBDir = "tmp";
	public static final String LWFBfilename = "lwfb";

	private static File lwfbFile;

	static int H = 10;
	static int W = 16;

	static int pixels[][] = new int[W][H];

	static byte font_5x7_col[][] = { { 0x00, 0x00, 0x00, 0x00, 0x00 }, //
			{ 0x00, 0x00, 0x00, 0x00, 0x00 }, //
			{ 0x00, 0x00, 0x00, 0x00, 0x00 }, //
			{ 0x00, 0x00, 0x00, 0x00, 0x00 }, //
			{ 0x00, 0x00, 0x00, 0x00, 0x00 }, //
			{ 0x00, 0x00, 0x00, 0x00, 0x00 }, //
			{ 0x00, 0x00, 0x00, 0x00, 0x00 }, //
			{ 0x00, 0x00, 0x00, 0x00, 0x00 }, //
			{ 0x00, 0x00, 0x00, 0x00, 0x00 }, //
			{ 0x03, 0x07, 0x7E, 0x20, 0x1C }, //
			{ 0x60, 0x66, 0x09, 0x09, 0x09 }, //
			{ 0x60, 0x6F, 0x0A, 0x0A, 0x08 }, //
			{ 0x10, 0x18, 0x1C, 0x18, 0x10 }, //
			{ 0x00, 0x3E, 0x1C, 0x08, 0x00 }, //
			{ 0x00, 0x08, 0x1C, 0x3E, 0x00 }, //
			{ 0x04, 0x0C, 0x1C, 0x0C, 0x04 }, //
			{ 0x7F, 0x00, 0x00, 0x00, 0x00 }, // (1 col left)
			{ 0x7F, 0x7F, 0x00, 0x00, 0x00 }, // (2 col left)
			{ 0x7F, 0x7F, 0x7F, 0x00, 0x00 }, // (3 col left)
			{ 0x7F, 0x7F, 0x7F, 0x7F, 0x00 }, // (4 col left)
			{ 0x7F, 0x7F, 0x7F, 0x7F, 0x7F }, // (solid fill)
			{ 0x00, 0x7F, 0x7F, 0x7F, 0x7F }, // (4 col right)
			{ 0x00, 0x00, 0x7F, 0x7F, 0x7F }, // (3 col right)
			{ 0x00, 0x00, 0x00, 0x7F, 0x7F }, // (2 col right)
			{ 0x00, 0x00, 0x00, 0x00, 0x7F }, // (1 col right)
			{ 0x03, 0x07, 0x7E, 0x20, 0x1C }, // (music note)
			{ 0x60, 0x66, 0x09, 0x09, 0x09 }, // (deg c)
			{ 0x60, 0x6F, 0x0A, 0x0A, 0x08 }, // (deg f)
			{ 0x10, 0x18, 0x1C, 0x18, 0x10 }, // (triangle down)
			{ 0x00, 0x3E, 0x1C, 0x08, 0x00 }, // (triangle right)
			{ 0x00, 0x08, 0x1C, 0x3E, 0x00 }, // (triangle left)
			{ 0x04, 0x0C, 0x1C, 0x0C, 0x04 }, // (triangle up)
			{ 0x00, 0x00, 0x00, 0x00, 0x00 }, // (space)
			{ 0x00, 0x7D, 0x00, 0x00, 0x00 }, // (!)
			{ 0x00, 0x70, 0x00, 0x70, 0x00 }, // (")
			{ 0x14, 0x7F, 0x14, 0x7F, 0x14 }, // (#)
			{ 0x12, 0x2A, 0x7F, 0x2A, 0x24 }, // ($)
			{ 0x62, 0x64, 0x08, 0x13, 0x23 }, // (%)
			{ 0x36, 0x49, 0x35, 0x02, 0x05 }, // (&)
			{ 0x00, 0x50, 0x60, 0x00, 0x00 }, // (')
			{ 0x00, 0x1C, 0x22, 0x41, 0x00 }, // (()
			{ 0x00, 0x41, 0x22, 0x1C, 0x00 }, // ())
			{ 0x44, 0x28, 0x7C, 0x28, 0x44 }, // (*)
			{ 0x08, 0x08, 0x7F, 0x08, 0x08 }, // (+)
			{ 0x05, 0x06, 0x00, 0x00, 0x00 }, // (,)
			{ 0x08, 0x08, 0x08, 0x00, 0x00 }, // (-)
			{ 0x00, 0x03, 0x03, 0x00, 0x00 }, // (.)
			{ 0x02, 0x04, 0x08, 0x10, 0x20 }, // (/)
			{ 0x3E, 0x45, 0x49, 0x51, 0x3E }, // (0)
			{ 0x00, 0x21, 0x7F, 0x01, 0x00 }, // (1)
			{ 0x21, 0x43, 0x45, 0x49, 0x31 }, // (2)
			{ 0x42, 0x41, 0x51, 0x69, 0x46 }, // (3)
			{ 0x0C, 0x14, 0x24, 0x7F, 0x04 }, // (4)
			{ 0x72, 0x51, 0x51, 0x51, 0x4E }, // (5)
			{ 0x1E, 0x29, 0x49, 0x49, 0x06 }, // (6)
			{ 0x43, 0x44, 0x48, 0x50, 0x60 }, // (7)
			{ 0x36, 0x49, 0x49, 0x49, 0x36 }, // (8)
			{ 0x30, 0x49, 0x49, 0x4A, 0x3C }, // (9)
			{ 0x00, 0x36, 0x36, 0x00, 0x00 }, // (:)
			{ 0x00, 0x35, 0x36, 0x00, 0x00 }, // (;)
			{ 0x08, 0x14, 0x22, 0x41, 0x00 }, // (<)
			{ 0x14, 0x14, 0x14, 0x14, 0x14 }, // (=)
			{ 0x41, 0x22, 0x14, 0x08, 0x00 }, // (>)
			{ 0x20, 0x40, 0x45, 0x48, 0x30 }, // (?)
			{ 0x3E, 0x41, 0x4D, 0x51, 0x36 }, // (@)
			{ 0x3F, 0x48, 0x48, 0x48, 0x3F }, // (A)
			{ 0x7F, 0x49, 0x49, 0x49, 0x36 }, // (B)
			{ 0x3E, 0x41, 0x41, 0x41, 0x22 }, // (C)
			{ 0x7F, 0x41, 0x41, 0x41, 0x3E }, // (D)
			{ 0x7F, 0x49, 0x49, 0x49, 0x41 }, // (E)
			{ 0x7F, 0x48, 0x48, 0x48, 0x40 }, // (F)
			{ 0x3E, 0x41, 0x49, 0x49, 0x2E }, // (G)
			{ 0x7F, 0x08, 0x08, 0x08, 0x7F }, // (H)
			{ 0x00, 0x41, 0x7F, 0x41, 0x00 }, // (I)
			{ 0x02, 0x01, 0x41, 0x7E, 0x40 }, // (J)
			{ 0x7F, 0x08, 0x14, 0x22, 0x41 }, // (K)
			{ 0x7F, 0x01, 0x01, 0x01, 0x01 }, // (L)
			{ 0x7F, 0x20, 0x18, 0x20, 0x7F }, // (M)
			{ 0x7F, 0x10, 0x08, 0x04, 0x7F }, // (N)
			{ 0x3E, 0x41, 0x41, 0x41, 0x3E }, // (O)
			{ 0x7F, 0x48, 0x48, 0x48, 0x30 }, // (P)
			{ 0x3E, 0x41, 0x45, 0x42, 0x3D }, // (Q)
			{ 0x7F, 0x48, 0x4C, 0x4A, 0x31 }, // (R)
			{ 0x31, 0x49, 0x49, 0x49, 0x46 }, // (S)
			{ 0x40, 0x40, 0x7F, 0x40, 0x40 }, // (T)
			{ 0x7E, 0x01, 0x01, 0x01, 0x7E }, // (U)
			{ 0x7C, 0x02, 0x01, 0x02, 0x7C }, // (V)
			{ 0x7E, 0x01, 0x06, 0x01, 0x7E }, // (W)
			{ 0x63, 0x14, 0x08, 0x14, 0x63 }, // (X)
			{ 0x70, 0x08, 0x07, 0x08, 0x70 }, // (Y)
			{ 0x43, 0x45, 0x49, 0x51, 0x61 }, // (Z)
			{ 0x00, 0x7F, 0x41, 0x41, 0x00 }, // ([)
			{ 0x20, 0x10, 0x08, 0x04, 0x02 }, // (\)
			{ 0x00, 0x41, 0x41, 0x7F, 0x00 }, // (])
			{ 0x10, 0x20, 0x40, 0x20, 0x10 }, // (^)
			{ 0x01, 0x01, 0x01, 0x01, 0x01 }, // (_)
			{ 0x00, 0x40, 0x20, 0x10, 0x00 }, // (`)
			{ 0x02, 0x15, 0x15, 0x15, 0x0F }, // (a)
			{ 0x7F, 0x09, 0x11, 0x11, 0x0E }, // (b)
			{ 0x0E, 0x11, 0x11, 0x11, 0x02 }, // (c)
			{ 0x0E, 0x11, 0x11, 0x09, 0x7F }, // (d)
			{ 0x0E, 0x15, 0x15, 0x15, 0x0C }, // (e)
			{ 0x08, 0x3F, 0x48, 0x40, 0x20 }, // (f)
			{ 0x18, 0x25, 0x25, 0x25, 0x3E }, // (g)
			{ 0x7F, 0x08, 0x10, 0x10, 0x0F }, // (h)
			{ 0x00, 0x11, 0x5F, 0x01, 0x00 }, // (i)
			{ 0x02, 0x01, 0x11, 0x5E, 0x00 }, // (j)
			{ 0x7F, 0x04, 0x0A, 0x11, 0x00 }, // (k)
			{ 0x00, 0x41, 0x7F, 0x01, 0x00 }, // (l)
			{ 0x1F, 0x10, 0x0C, 0x10, 0x0F }, // (m)
			{ 0x1F, 0x08, 0x10, 0x10, 0x0F }, // (n)
			{ 0x0E, 0x11, 0x11, 0x11, 0x0E }, // (o)
			{ 0x1F, 0x14, 0x14, 0x14, 0x08 }, // (p)
			{ 0x08, 0x14, 0x14, 0x14, 0x0F }, // (q)
			{ 0x1F, 0x08, 0x10, 0x10, 0x08 }, // (r)
			{ 0x09, 0x15, 0x15, 0x15, 0x02 }, // (s)
			{ 0x10, 0x7E, 0x11, 0x01, 0x02 }, // (t)
			{ 0x1E, 0x01, 0x01, 0x02, 0x1F }, // (u)
			{ 0x1C, 0x02, 0x01, 0x02, 0x1C }, // (v)
			{ 0x1E, 0x01, 0x02, 0x01, 0x1E }, // (w)
			{ 0x11, 0x0A, 0x04, 0x0A, 0x11 }, // (x)
			{ 0x18, 0x05, 0x05, 0x05, 0x1E }, // (y)
			{ 0x11, 0x13, 0x15, 0x19, 0x11 }, // (z)
			{ 0x08, 0x36, 0x41, 0x00, 0x00 }, // ({)
			{ 0x00, 0x00, 0x7F, 0x00, 0x00 }, // (|)
			{ 0x00, 0x00, 0x41, 0x36, 0x08 }, // (})
			{ 0x08, 0x08, 0x2A, 0x1C, 0x08 }, // (arrow right)
			{ 0x08, 0x1C, 0x2A, 0x08, 0x08 }, // (arrow left)

	};

	public static void drawCharAtFast(int xref, int yref, char c, int color) {
		byte letter[] = font_5x7_col[c];

		/** Optimisation Level 1 don't display out of screen characters **/
		int font_width = 5;
		int font_height = 7;

		int row_start = 0, row_end = font_height;
		int col_start = 0, col_end = font_width;

		if (xref <= (-font_width)) // Out of screen to the left
		{
			return;
		}

		if (yref <= (-font_height)) // Out of screen to the Top
		{
			return;
		}

		if (yref >= H) // Out of screen to the bottom
		{
			return;
		}

		if (xref >= W) // Out of screen to the right
		{
			return;
		}

		/** End opt level 1 **/

		/** Begin level Opt 2 Only process begin of screen visible pixels **/

		row_start = yref < 0 ? -yref : 0; // Offset set start of row by xref if is is negative, only takes the visible
		// pixels
		col_start = xref < 0 ? -xref : 0;

		/** End level opt 2 **/

		/** level Opt 3 Only process the visible end of screen pixels **/

		row_end = yref + font_height > H ? H - yref : font_height; // Some pixels will go out of window on the bottom
		col_end = xref + font_width > W ? W - xref : font_width;
		// Some pixels will go out of window on the right
		// so the last column index + 1 is W-xref

		/** End level opt 3 */

		// Navigate through the letter pixels
		for (int row = row_start; row < row_end; row++) {
			for (int col = col_start; col < col_end; col++) {
				int xn = xref + col;
				int yn = yref + row;

				// if the pixel is visible, draw it
				if ((letter[col] & (0x40 >> row)) != 0) // pixel ON
				{
					// pixel_string[pix_map[xn][yn]] = color;
					pixels[xn][yn] = color;
				} else // pixel OFF
				{

				}
			}
		}
	}

	public static void drawStringAt(int xref, int yref, String s, int color) {
		for (int i = 0; i < s.length(); i++) {
			drawCharAtFast(xref, yref, s.charAt(i), color);
			xref += 6;
		}
	}

	public static void writetoLWFB() throws IOException {

		byte data[] = new byte[3 * H * W];
		//new Random().nextBytes(data);

		for (int y = 0; y < H; y++) {
			for (int x = 0; x < W; x++) {
				int id = y * W + x;
				data[3 * id] = (byte) ((pixels[x][y] >> 16) & 0xFF);
				data[3 * id + 1] = (byte) ((pixels[x][y] >> 8) & 0xFF);
				data[3 * id + 2] = (byte) ((pixels[x][y]) & 0xFF);
			}
		}

		FileOutputStream fos;

		fos = new FileOutputStream(lwfbFile);

		fos.write(data);

		fos.close();

	}

	public static void fillBg(int color)
	{
		for (int y = 0; y < H; y++) {
			for (int x = 0; x < W; x++) {
				pixels[x][y]=color;
			}
		}
	}

	public static void fillGradientHor(int from,int to)
	{

		int rf= (from>>16) & 0xFF;
		int gf= (from>>8) & 0xFF;
		int bf= (from>>0) & 0xFF;
		int rt= (to>>16) & 0xFF;
		int gt= (to>>8) & 0xFF;
		int bt= (to>>0) & 0xFF;

		int r,g,b;
		for (int y = 0; y < H; y++) {
			for (int x = 0; x < W; x++) {

				r= rf*(W-1-x)/(W-1) + rt*x/(W-1);
				g= gf*(W-1-x)/(W-1) + gt*x/(W-1);
				b= bf*(W-1-x)/(W-1) + bt*x/(W-1);

				r&=0xFF;
				b&=0xFF;
				g&=0xFF;

				pixels[x][y]=0xFFFFFF & (r<<16 | g<<8 | b);
			}
		}
	}
	
	public static void fillGradientVert(int from,int to)
	{

		int rf= (from>>16) & 0xFF;
		int gf= (from>>8) & 0xFF;
		int bf= (from>>0) & 0xFF;
		int rt= (to>>16) & 0xFF;
		int gt= (to>>8) & 0xFF;
		int bt= (to>>0) & 0xFF;

		int r,g,b;
		for (int y = 0; y < H; y++) {
			for (int x = 0; x < W; x++) {

				r= rf*(H-1-y)/(H-1) + rt*y/(H-1);
				g= gf*(H-1-y)/(H-1) + gt*y/(H-1);
				b= bf*(H-1-y)/(H-1) + bt*y/(H-1);

				r&=0xFF;
				b&=0xFF;
				g&=0xFF;

				pixels[x][y]=0xFFFFFF & (r<<16 | g<<8 | b);
			}
		}
	}

	public static void main(String[] args) throws IOException, InterruptedException {

		System.out.println("LWFB Writer");

		// Check the path of the /tmp folder
		final Path tmpFolderPath = FileSystems.getDefault()
				.getPath(System.getenv("SystemDrive") + File.separator + LWFBDir);
		System.out.println(tmpFolderPath);

		lwfbFile = new File(tmpFolderPath.toAbsolutePath().toString(), LWFBfilename);

		int xref=0;

		String textstr="Led Wall 2019";


		int strwidth=(textstr.length())*6;
		int c=0x000000;
		while (true) {


			//fillBg(0xFFFFFF);
			fillGradientVert(0xFF4466,0x552211);

			c=0x00FF00;
			drawStringAt(xref,2,textstr,c);


			writetoLWFB();
			Thread.sleep(100);


			if(xref < -strwidth)
			{
				xref=W;
			}
			else
			{
				xref--; 
			}
		}

	}

}
